package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"time"
)

func Swap(atual *int, proximo *int) {
	aux := *atual
	*atual = *proximo
	*proximo = aux
}

func bubbleSort(arr *[]int, n int) {
	for i := 0; i < n-1; i++ {
		for j := 0; j < (n - i - 1); j++ {
			if (*arr)[j] > (*arr)[j+1] {
				Swap(&(*arr)[j], &(*arr)[j+1])
			}
		}
	}
}

func main() {
	argumento := os.Args[1] // recebe via terminal a quantidade de registros
	// verifica se foi passado algum argumento
	if len(argumento) == 0 {
		fmt.Println("Nenhum argumento fornecido.")
		os.Exit(0)
	}

	// converte argumento para um numero inteiro
	tamanho, err := strconv.Atoi(argumento)
	// verifica erro na conversao
	if err != nil {
		fmt.Printf("Erro ao converter argumento para inteiro.")
		os.Exit(1)
	}

	// Abre arquivo dos dados a serem ordenados
	file, ferror := os.Open("numeros.txt")
	if ferror != nil {
		fmt.Println("Erro ao abrir arquivo numeros.txt")
		os.Exit(1)
	}

	// Abre arquivo para armazenar os dados ordenados
	file2, err := os.OpenFile("numerosOrdenados.txt", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if ferror != nil {
		fmt.Println("Erro ao abrir arquivo numerosOrdenados.txt: ", ferror)
		os.Exit(1)
	}

	// Fecha arquivo dos dados iniciais
	defer func() {
		if ferror := file.Close(); ferror != nil {
			fmt.Println("Erro ao fechar arquivo numeros.txt")
			os.Exit(1)
		}
	}()

	// Fecha arquivo dos dados ordenados
	defer func() {
		if ferror := file2.Close(); ferror != nil {
			fmt.Println("Erro ao fechar arquivo numerosOrdenados.txt")
			os.Exit(1)
		}
	}()

	// Scanner para ler cada linha do arquivo
	scanner := bufio.NewScanner(file)

	// slice para armazenar os dados lidos
	dados := make([]int, 0)

	// Ler cada linha e armazenar
	for i := 0; i < tamanho; i++ {
		// Verificar se há mais linhas para ler
		if !scanner.Scan() {
			// Verificar se ocorreu algum erro
			if scanner.Err() != nil {
				fmt.Println("Erro ao ler a linha:", scanner.Err())
				os.Exit(1)
			}
			// Não há mais linhas para ler
			break
		}

		// Obter o dado da linha atual
		dado := scanner.Text()

		dadoint, err := strconv.Atoi(dado)
		if err != nil {
			fmt.Println("Erro ao ler o número:", err)
			os.Exit(1)
		}

		// Adicionar o dado ao slice
		dados = append(dados, dadoint)
	}

	// Verifica possivel erro na leitura do arquivo
	if err := scanner.Err(); err != nil {
		fmt.Println("Erro ao ler o arquivo numeros.txt:", err)
		os.Exit(1)
	}

	// Medir o tempo de execução
	start := time.Now()

	// ordena os dados
	bubbleSort(&dados, tamanho)

	// Calcular o tempo de execução
	elapsed := time.Since(start)

	// Escrever os dados ordenados no arquivo
	for _, dado := range dados {
		numeroStr := strconv.Itoa(dado)
		_, err := file2.WriteString(numeroStr + "\n")
		if err != nil {
			fmt.Println("Erro ao escrever no arquivo numerosOrdenados.txt:", err)
			os.Exit(1)
		}
	}

	// Calcular o número de comparações
	numComparacoes := (len(dados)*len(dados) - len(dados)) / 2

	// Calcular o numero de trocas caso médio
	trocasMedio := (3*len(dados)*len(dados) - len(dados)) / 4

	// Calcular o numero de trocas pior caso
	trocarPior := (3*len(dados)*len(dados) - len(dados)) / 2

	// Imprimir o tempo de execução, comparacoes e trocas
	fmt.Println(elapsed, numComparacoes, trocasMedio, trocarPior)

	/*fmt.Printf("Argumento lido e convertido para inteiro: %d\n", tamanho)

	// Imprimir os nomes lidos
	fmt.Println("Nomes lidos:")
	for _, dado := range dados {
		fmt.Println(dado)
	}*/

}
